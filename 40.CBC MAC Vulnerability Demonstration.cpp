#include <stdio.h>
#include <stdint.h>
#include <string.h>

#define BLOCK_SIZE 16

void aes_encrypt(const uint8_t *plaintext, const uint8_t *key, uint8_t *ciphertext) {
    for (int i = 0; i < BLOCK_SIZE; i++) {
        ciphertext[i] = plaintext[i] ^ key[i];
    }
}

void cbc_mac(const uint8_t *message, size_t msg_len, const uint8_t *key, uint8_t *result) {
    uint8_t iv[BLOCK_SIZE] = {0};
    uint8_t current_block[BLOCK_SIZE];
    uint8_t encrypted_block[BLOCK_SIZE];
    
    memcpy(encrypted_block, iv, BLOCK_SIZE);
    
    for (size_t i = 0; i < msg_len; i += BLOCK_SIZE) {
        for (int j = 0; j < BLOCK_SIZE; j++) {
            current_block[j] = message[i + j] ^ encrypted_block[j];
        }
        aes_encrypt(current_block, key, encrypted_block);
    }
    
    memcpy(result, encrypted_block, BLOCK_SIZE);
}

int main() {
    uint8_t key[BLOCK_SIZE] = {
        0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
        0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10
    };
    
    uint8_t X[BLOCK_SIZE] = "HelloWorld123456";
    uint8_t T[BLOCK_SIZE];
    cbc_mac(X, BLOCK_SIZE, key, T);
    
    printf("MAC for X: ");
    for (int i = 0; i < BLOCK_SIZE; i++) {
        printf("%02x ", T[i]);
    }
    printf("\n");
    
    uint8_t two_block_msg[2 * BLOCK_SIZE];
    memcpy(two_block_msg, X, BLOCK_SIZE);
    
    for (int i = 0; i < BLOCK_SIZE; i++) {
        two_block_msg[BLOCK_SIZE + i] = X[i] ^ T[i];
    }
    
    uint8_t T2[BLOCK_SIZE];
    cbc_mac(two_block_msg, 2 * BLOCK_SIZE, key, T2);
    
    printf("MAC for X||(X?T): ");
    for (int i = 0; i < BLOCK_SIZE; i++) {
        printf("%02x ", T2[i]);
    }
    printf("\n");
    
    if (memcmp(T, T2, BLOCK_SIZE) == 0) {
        printf("Vulnerability confirmed: Both MACs are identical!\n");
    } else {
        printf("Error: MACs don't match as expected\n");
    }
    
    return 0;
}
